# User table
# type Blog @model { 
type User @model @key(name: "byUserName", fields: ["username", "id"], queryField: "getUserByEmail") { 
  id: ID! @connection(name: "reservationToUsers")
  name: String!
  username: String!
  email: String!
  home_country: String
  # reservations: [Reservation] @connection(keyName: "hasReservation", fields: ["id"]) # subscription for this?
  reservations: [Reservation] @connection(name: "userToReservations") # subscription for this?
  # reservations: [ID]
  # reservations: [String]
  # posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
  posts: [Post] @connection(keyName: "byUser", fields: ["id"])
  #change above keyname to byUser
  isTeller: Boolean!
  price: Int
  stripeAccount: String
  current_country: String
  current_city: String
}

# Post Table
# type Post @model @key(name: "byBlog", fields: ["blogID"]) {
type Post @model @key(name: "byUser", fields: ["userID"]) {
  id: ID! 
  title: String
  userID: ID!
  dateTime: String!
  country: String!
  city: String!
  type: String!
  # blog: Blog @connection(fields: ["blogID"])
  user: User @connection(fields: ["userID"])
  # comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  text: String
  link: String
  image: String
}

# Reservation Table
# type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
# type Reservation @model @key(name: "hasReservation", fields: ["postID", "content"]) {
type Reservation @model @key(name: "hasReservation", fields: ["userIDs"]) {
# type Reservation @model {
# @key(name: "hasReservation", fields: ["userIDs"]) {
  id: ID! @connection(name: "userToReservations")
  # createdDateTime: String!
  startDateTime: String!
  duration: Float!
  price: Float!
  status: String!
  type: String! #subscription for this?
  # country: String!
  # city: String!
  country: String
  city: String
  title: String
  description: String
  userIDs: [User!]! @connection(name: "reservationToUsers") #subscription for this?
  tellerID: User!

	# postID: ID!
	# post: Post @connection(fields: ["postID"])
	# content: String!
}

# Twilio Video Generator
input VideoInput {
	id: String!
	identity: String!
	room: String!
}

type Mutation {
	generateVideoToken(input: VideoInput!): String @function(name: "createVideoToken-${env}")
}
